[{"path":"https://optimal2050.github.io/multimod/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 OptimalSolution LLC, multimod authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"example-equation-1","dir":"Articles","previous_headings":"","what":"Example equation #1","title":"Abstract Syntax Tree","text":"","code":"mm <- example_model$model_info |> as_multimod() mm <- as_multimod(   x = model_info,    name = \"Base energyRt model\",   desc = \"Converted to multimod format and exported to PDF/LaTeX using the multimod R package\",   authors = \"source: www.energyRt.org\\nhttps://github.com/optimal2050/multimod\"   ) # eq <- example_model$multimod$equations$eqTechCapUp eq <- mm$equations$eqTechCapUp print(eq$name); print(eq$desc) names(eq)"},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"full-tree-structure","dir":"Articles","previous_headings":"Example equation #1","what":"Full tree structure","title":"Abstract Syntax Tree","text":"","code":"depth(eq) tree(eq, max_depth = 5)"},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"network-representation","dir":"Articles","previous_headings":"Example equation #1","what":"Network representation","title":"Abstract Syntax Tree","text":"","code":"eq_net <- multimod::get_network_data(eq) visNetwork(eq_net$nodes, eq_net$edges) |>   visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) |>   visHierarchicalLayout(direction = \"LR\")"},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"latex-output","dir":"Articles","previous_headings":"Example equation #1","what":"LaTeX output","title":"Abstract Syntax Tree","text":"","code":"eq_latex <- as_latex(eq) cat(eq_latex) write_latex(eq, file = \"tmp/test.tex\")"},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"example-equation-2","dir":"Articles","previous_headings":"","what":"Example equation #2","title":"Abstract Syntax Tree","text":"","code":"# eq <- example_model$multimod$equations$eqTechAInp eq <- mm$equations$eqTechAInp eq <- mm$equations$eqTechCap eq <- mm$equations$eqCost eq <- mm$equations$eqTaxCost eq <- mm$equations$eqStorageEac eq <- mm$equations$eqTechSng2Sng eq <- mm$equations$eqStorageStore eq <- mm$equations$eqImportIrCost eq <- mm$equations$eqStorageVarom eq <- mm$equations$eqTechGrp2Sng eq <- mm$equations$eqTechAfcOutLo eq <- mm$equations$eqImportTot eq <- mm$equations$eqTechEac eq <- mm$equations$eqAggOutTot eq <- mm$equations$eqTechSng2Grp eq <- mm$equations$eqTechShareInpUp eq <- alias_ast_names(eq, aliases = example_model$short_aliases) print(eq$name); print(eq$desc)"},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"partial-tree-structure","dir":"Articles","previous_headings":"Example equation #2","what":"Partial tree structure","title":"Abstract Syntax Tree","text":"","code":"tree(eq, max_depth = 3)"},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"network-representation-1","dir":"Articles","previous_headings":"Example equation #2","what":"Network representation","title":"Abstract Syntax Tree","text":"","code":"eq_net <- get_network_data(eq, show_dims = TRUE) visNetwork(eq_net$nodes, eq_net$edges) |>   visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) |>   visInteraction(navigationButtons = TRUE) |>   visHierarchicalLayout(direction = \"LR\")"},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"latex-output-1","dir":"Articles","previous_headings":"Example equation #2","what":"LaTeX output","title":"Abstract Syntax Tree","text":"","code":"eq_w <- remap_ast_elements(eq)  # eq_latex <- as_latex(eq_w) # eq_latex <-  # eq_latex |> cat()  write_latex(eq_w, file = \"tmp/test.tex\") write_latex(eq, file = \"tmp/test.tex\") write_latex(ast_node, file = \"tmp/test.tex\")   m <- mm m$equations <- mm$equations |>   lapply(remap_ast_elements) |>   lapply(alias_ast_names, aliases = example_model$short_aliases) write_latex(m, file = \"tmp/multimod-test.tex\", include_aliases = F)  write_latex(m$equations$eqObjective, file = \"tmp/eqObjective.tex\")"},{"path":"https://optimal2050.github.io/multimod/articles/ast.html","id":"gams-output","dir":"Articles","previous_headings":"Example equation #2","what":"GAMS output","title":"Abstract Syntax Tree","text":"","code":"write_gams(mm, file = \"tmp/multimod-test.gms\", format_expr = TRUE)"},{"path":"https://optimal2050.github.io/multimod/articles/devstatus.html","id":"development-status-multimod","dir":"Articles","previous_headings":"","what":"Development Status: multimod","title":"devstatus","text":"multimod package active experimental development. document outlines current capabilities, design scope, limitations, roadmap future enhancements.","code":""},{"path":"https://optimal2050.github.io/multimod/articles/devstatus.html","id":"whats-implemented","dir":"Articles","previous_headings":"Development Status: multimod","what":"‚úîÔ∏è What‚Äôs Implemented","title":"devstatus","text":"GAMS-style equation parsing symbolic abstract syntax trees (AST) Sets Parameters Variables Mappings Equations constraints GAMS LaTeX Julia/JuMP (progress) Expression tree visualization visNetwork Basic symbolic simplification Integration energyRt data structures","code":""},{"path":"https://optimal2050.github.io/multimod/articles/devstatus.html","id":"current-limitations","dir":"Articles","previous_headings":"Development Status: multimod","what":"üîí Current Limitations","title":"devstatus","text":"Limited linear programming (LP) models Designed closely around energyRt models structure GAMS input currently supported general-purpose parsing languages like JuMP, Pyomo, AMPL intended convert arbitrary code full model definitions direct support model data input/output formats","code":""},{"path":"https://optimal2050.github.io/multimod/articles/devstatus.html","id":"project-philosophy","dir":"Articles","previous_headings":"Development Status: multimod","what":"üéØ Project Philosophy","title":"devstatus","text":"goal multimod automate full model translation parsing. Instead, aims : Facilitate development symbolic restructuring optimization models Act transparent intermediate representation multi-language export Assist documentation visualization models symbolic structure enables users adapt refine models hand, especially development, testing, educational use.","code":""},{"path":"https://optimal2050.github.io/multimod/articles/devstatus.html","id":"potential-use-cases","dir":"Articles","previous_headings":"Development Status: multimod","what":"üß≠ Potential Use Cases","title":"devstatus","text":"Model prototyping equation editing Generation readable documentation (e.g., LaTeX equation listings) Translating symbolic equations across modeling languages (e.g., GAMS ‚áÑ JuMP ‚áÑ Pyomo) Structural visualization debugging collaboration Teaching optimization model structure indexing concepts","code":""},{"path":"https://optimal2050.github.io/multimod/articles/devstatus.html","id":"planned-features","dir":"Articles","previous_headings":"Development Status: multimod","what":"üîú Planned Features","title":"devstatus","text":"read_jump() read_pyomo() read_gmpl() Pyomo, AMPL, GMPL Equation simplification data-driven dimensions reduction (‚Äúfolding‚Äù) MPS, CPLEX, Gurobi, formats Nonlinear expressions Integer/binary variables Equation grouping, tagging, metadata Enhanced IDE browser-based visualizations","code":""},{"path":"https://optimal2050.github.io/multimod/articles/devstatus.html","id":"contributing-sponsorship","dir":"Articles","previous_headings":"Development Status: multimod","what":"ü§ù Contributing & Sponsorship","title":"devstatus","text":"package active development. Contributions welcome! Ways help: Open issues bugs, feature requests, improvements Propose support new modeling targets Share use cases example models Sponsor development specific features (e.g., Pyomo exporter) contributions, visit: https://github.com/optimal2050/multimod Contact: supportopensource@optimalsolution.dev","code":""},{"path":"https://optimal2050.github.io/multimod/articles/multimod.html","id":"import-gams-model-structure","dir":"Articles","previous_headings":"","what":"Import GAMS model structure","title":"multimod","text":"","code":"model_info <- read_gams_model(gams_file, include = T, verbose = F) class(model_info) str(model_info, max.level = 1) print.model_structure(model_info) # Collect all symbols symbols <- build_symbols_list(model_info) str(symbols, max.level = 1) # lobstr::tree(symbols, max_length = 10, max_depth = 3) # analyze an equation ast_node <- parse_gams_equation(model_info$equations[[1]], symbols) # ast_node <- coerce_gams_equation(model_info$equations$eqTechCapUp, symbols) # ast_node <- coerce_gams_equation(model_info$equations$eqTechSng2Sng, symbols) map_ast(ast_node, function(x) {if (is.list(x)) x$brackets}) |> tree()  model_info$equations$eqTechCapUp  # str(ast_node, max.level = 5) lobstr::tree(ast_node, max_length = 100, max_depth = 5)  plot.multimod_ast(ast_node)  multimod <- as_multimod(model_info)  eq_obj <- parse_gams_equation(   model_info$equations$eqTechSng2Sng,   # model_info$equations[[2]],   # model_info$equations$eqTechCap,   # model_info$equations$eqTechCapUp,   # model_info$equations$eqTechAInp,   # model_info$equations$eqExportRowCost,   # model_info$equations$eqTechGrp2Sng,   # model_info$equations$eqTechSng2Grp,   # model_info$equations$eqEmsFuelTot,   # model_info$equations$eqStorageStore,   # model_info$equations$eqOutTot,   symbols ) # gams_to_multimod(model_info$equations$eqTechCapUp$gams, symbols)  eq_obj$name class(eq_obj) print(eq_obj) class(eq_obj) str(eq_obj, max.level = 2) lobstr::tree(eq_obj, max_length = 100, max_depth = 10) eq_obj$lhs eq_obj$relation eq_obj$rhs eq_obj$rhs |> lobstr::tree(max_length = 100, max_depth = 10)  as_latex(eq_obj) |> cat()  eq_viz <- get_network_data(eq_obj) str(eq_viz, max.level = 10) eq_viz |> lobstr::tree(max_length = 100, max_depth = 10)  a <- visNetwork::visNetwork(eq_viz$nodes, eq_viz$edges) class(a) a  # library(visNetwork) visNetwork::visNetwork(eq_viz$nodes, eq_viz$edges) |>   visNetwork::visNodes(shape = \"box\", font = list(size = 20)) |>   visNetwork::visEdges(arrows = \"to\") |>   visNetwork::visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) |>   visNetwork::visHierarchicalLayout(direction = \"LR\")  as_visNetwork.multimod_equation(eq_obj, title = eq_obj$name)  if (F) {   # parse_gams_expr(\"mTechNew(t,r,yp) and ordYear(y) >= ordYear(yp) or mTechOlifeInf(t,r)\")   # ((mTechNew[t,r,yp] and (ordYear[y] >= ordYear[yp])) or mTechOlifeInf[t,r])   expr <- \"mTechNew(t,r,yp) and ordYear(y) >= ordYear(yp) or mTechOlifeInf(t,r)\"   top_level_operators(expr, descending = TRUE)   ast <- parse_gams_expr(expr)   # ast <- parse_gams_expr(model_info$equations$eqTechCapUp, symbols)   # \"mTechNew(t,r,yp) and ordYear(y) >= ordYear(yp) or mTechOlifeInf(t,r)\"   class(ast)   # as.character(ast) |> cat()   lobstr::tree(ast)   plot.multimod_ast(ast)   plot_d.multimod_ast(ast) }  # shiny::runApp(system.file(\"shiny\", package = \"visNetwork\")) # plot_multimod_equation_visnetwork(eq_obj, title = \"eqTechCapUp\")  # plot(eq_obj$a)  eq_obj <- multimod$equations$eqTechGrp2Grp eq_obj <- multimod$equations$eqTechAfLo # eq_obj <- multimod$equations$eqTechAfsLo # eq_string <- model_info$equations$eqTechGrp2Grp$gams lobstr::tree(eq_obj) as_visNetwork(eq_obj) # eq <- normalize_linear_eqn(eq_obj, lhs_var_name = \"vTechAct\") # as_visNetwork.multimod_equation(eq, )  as_visNetwork(multimod$equations$eqTechAInp)  as_visNetwork(multimod$equations$eqExportRowCost)"},{"path":"https://optimal2050.github.io/multimod/articles/multimod.html","id":"latex","dir":"Articles","previous_headings":"","what":"LaTeX","title":"multimod","text":"","code":"model_info <- read_gams_model(gams_file, include = FALSE) multimod <- as_multimod(model_info) eq_obj <- multimod$equations$eqTechAfsLo eq_obj <- multimod$equations$eqTechCap  as_visNetwork.multimod_equation(eq_obj)  as_latex(eq_obj) as_latex(eq_obj$lhs)  eq <- remap_ast_elements(eq_obj) tree(eq)  as_visNetwork.multimod_equation(eq) as_latex(eq) |> cat()   write_latex(multimod,              # file = \"tmp/multimod.tex\"             # include_sets = FALSE,             # include_aliases = FALSE,             # include_parameters = FALSE,             # include_variables = FALSE,              # include_equations = FALSE             )              as_latex(eq_obj$lhs)   eq_obj$lhs |> tree()  eq <- alias_ast_names(eq_obj, aliases = set_short_names)  eq$lhs |> tree()  as_latex(eq$lhs) as_latex(eq) |> cat()    as_visNetwork.multimod_equation(eq)     # Set expr <- multimod$equations$eqTechSng2Sng$lhs$lhs$dims class(expr) print(expr)  as_latex("},{"path":"https://optimal2050.github.io/multimod/articles/multimod.html","id":"parse-gams-expression","dir":"Articles","previous_headings":"LaTeX","what":"Parse GAMS expression","title":"multimod","text":"","code":"expr <- {\" - sum((comm, slice)$mExportRow(expp, comm, region, year, slice),       pExportRowPrice(expp, region, year, slice) * pSliceWeight(year, slice)       * vExportRow(expp, comm, region, year, slice)   )\"}  ast <- parse_gams_expr(expr) tree(ast, max_length = 100, max_depth = 10)  plot_d.multimod_ast(ast)"},{"path":"https://optimal2050.github.io/multimod/articles/roadmap.html","id":"whats-implemented","dir":"Articles","previous_headings":"","what":"‚úîÔ∏è What‚Äôs Implemented","title":"Development Status and Roadmap","text":"GAMS-style equation parsing symbolic abstract syntax trees (AST) Sets Parameters Variables Mappings Equations constraints GAMS LaTeX Julia/JuMP (progress) Expression tree visualization visNetwork Basic symbolic simplification Integration energyRt data structures","code":""},{"path":"https://optimal2050.github.io/multimod/articles/roadmap.html","id":"current-limitations","dir":"Articles","previous_headings":"","what":"üîí Current Limitations","title":"Development Status and Roadmap","text":"Limited linear programming (LP) models Designed closely around energyRt models structure GAMS input currently supported general-purpose parsing languages like JuMP, Pyomo, AMPL intended convert arbitrary code full model definitions direct support model data input/output formats","code":""},{"path":"https://optimal2050.github.io/multimod/articles/roadmap.html","id":"project-philosophy","dir":"Articles","previous_headings":"","what":"üéØ Project Philosophy","title":"Development Status and Roadmap","text":"goal multimod automate full model translation parsing. Instead, aims : Facilitate development symbolic restructuring optimization models Act transparent intermediate representation multi-language export Assist documentation visualization models symbolic structure enables users adapt refine models hand, especially development, testing, educational use.","code":""},{"path":"https://optimal2050.github.io/multimod/articles/roadmap.html","id":"potential-use-cases","dir":"Articles","previous_headings":"","what":"üß≠ Potential Use Cases","title":"Development Status and Roadmap","text":"Model prototyping equation editing Generation readable documentation (e.g., LaTeX equation listings) Translating symbolic equations across modeling languages (e.g., GAMS ‚áÑ JuMP ‚áÑ Pyomo) Structural visualization debugging collaboration Teaching optimization model structure indexing concepts","code":""},{"path":"https://optimal2050.github.io/multimod/articles/roadmap.html","id":"planned-features","dir":"Articles","previous_headings":"","what":"üîú Planned Features","title":"Development Status and Roadmap","text":"read_jump() read_pyomo() read_gmpl() Pyomo, AMPL, GMPL Equation simplification data-driven dimensions reduction (‚Äúfolding‚Äù) MPS, CPLEX, Gurobi, formats Nonlinear expressions Integer/binary variables Equation grouping, tagging, metadata Enhanced IDE browser-based visualizations","code":""},{"path":"https://optimal2050.github.io/multimod/articles/roadmap.html","id":"contributing-sponsorship","dir":"Articles","previous_headings":"","what":"ü§ù Contributing & Sponsorship","title":"Development Status and Roadmap","text":"package active development. Contributions welcome! Ways help: Open issues bugs, feature requests, improvements Propose support new modeling targets Share use cases example models Sponsor development specific features (e.g., Pyomo exporter) contributions, visit: https://github.com/optimal2050/multimod Contact: supportopensource@optimalsolution.dev","code":""},{"path":"https://optimal2050.github.io/multimod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Oleg Lugovoy. Author, maintainer.","code":""},{"path":"https://optimal2050.github.io/multimod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lugovoy O (2025). multimod: Define Render Mathematical Models Across Multiple Optimization Languages.. R package version 0.0.1.9000, https://optimal2050.github.io/multimod.","code":"@Manual{,   title = {multimod: Define and Render Mathematical Models Across Multiple Optimization Languages.},   author = {Oleg Lugovoy},   year = {2025},   note = {R package version 0.0.1.9000},   url = {https://optimal2050.github.io/multimod}, }"},{"path":"https://optimal2050.github.io/multimod/index.html","id":"multimod-","dir":"","previous_headings":"","what":"Define and Render Mathematical Models Across Multiple Optimization Languages.","title":"Define and Render Mathematical Models Across Multiple Optimization Languages.","text":"multimod R package defines domain-specific language (DSL) internal representation mathematical programming models. enables parsing, manipulation, export equations constraints across multiple modeling languages including GAMS, Pyomo, JuMP, LaTeX.","code":""},{"path":"https://optimal2050.github.io/multimod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Define and Render Mathematical Models Across Multiple Optimization Languages.","text":"","code":"# install.packages(\"pak\") pak::pak(\"optimal2050/multimod\")"},{"path":"https://optimal2050.github.io/multimod/index.html","id":"core-features","dir":"","previous_headings":"","what":"Core Features","title":"Define and Render Mathematical Models Across Multiple Optimization Languages.","text":"Parse GAMS-style equations symbolic tree structure Represent variables, parameters, mappings structured R objects Render equations multiple target formats: GAMS, Pyomo, JuMP, LaTeX Visualize equations graphs (visNetwork DiagrammeR)","code":""},{"path":"https://optimal2050.github.io/multimod/index.html","id":"workflow-diagram","dir":"","previous_headings":"","what":"Workflow Diagram","title":"Define and Render Mathematical Models Across Multiple Optimization Languages.","text":"Items curly braces {} planned implementation, double curly braces {{}} potential extensions.","code":"[ GAMS / {JuMP / Pyomo / GMPL} ]               ‚Üì           read_gams()          {read_jump()}          {read_pyomo()}          {read_gmpl()}            {{...}}               ‚Üì      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îÇ  model_structure   ‚îÇ      ‚îÇ (a named list ...) ‚îÇ      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚Üì         as_multimod()               ‚Üì    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ    Core Structures     ‚îÇ      as_visNetwork()    ‚îÇ    <ast>, <multimod>   ‚îÇ     {as_diagrammer()}    ‚îÇ (sets, parameters,     ‚îÇ ‚ü∑  {{symbolsic manipulation}}    ‚îÇ  variables, equations, ‚îÇ     {fold_parameters(), ...}    ‚îÇ  mappings, ...)        ‚îÇ     {data exchange}    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚Üì      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îÇ Rendering / Output ‚îÇ      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚Üì    ‚Üí write_latex()    ‚Üí write_gams()    ‚Üí {write_jump()}    ‚Üí {write_pyomo()}    ‚Üí {write_gmpl()}    ‚Üí {{write_ampl()}}    ‚Üí {{write_mps()}}    ‚Üí {{write_cplex()}}    ‚Üí {{write_gurobi()}}    ‚Üí {{...}}"},{"path":"https://optimal2050.github.io/multimod/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example Workflow","title":"Define and Render Mathematical Models Across Multiple Optimization Languages.","text":"Load GAMS model parse Render specific equation Julia/JuMP Visualize equation tree Convert LaTeX Write entire model LaTeX Save GAMS","code":"model_info <- read_gams(\"my_model.gms\") class(model_info) # \"model_structure\"  mod <- as_multimod(model_info, name = \"My model in multimod format\") class(mod) # \"multimod\" \"ast\" {as_jump(mod$equations[[\"eqObjective\"]])} library(visNetwork) as_visNetwork(mod$equations$eqObjective) as_latex(mod$equations$eqObjective) |> cat() write_latex(mod,              file = \"my_multimod_model.tex\",             title = \"My multimod model equations\",             subtitle = \"Generated by multimod package\") tinytex::pdflatex(\"my_multimod_model.tex\") write_gams(mod, file = \"my_multimod_model.gms\")"},{"path":"https://optimal2050.github.io/multimod/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Define and Render Mathematical Models Across Multiple Optimization Languages.","text":"MIT License","code":""},{"path":"https://optimal2050.github.io/multimod/index.html","id":"development-status","dir":"","previous_headings":"","what":"Development Status","title":"Define and Render Mathematical Models Across Multiple Optimization Languages.","text":"package active development. Contributions, bug reports, feature requests welcome! See details {devstatus}.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/alias_ast_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply name aliases to AST nodes ‚Äî alias_ast_names","title":"Apply name aliases to AST nodes ‚Äî alias_ast_names","text":"Apply name aliases AST nodes","code":""},{"path":"https://optimal2050.github.io/multimod/reference/alias_ast_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply name aliases to AST nodes ‚Äî alias_ast_names","text":"","code":"alias_ast_names(ast, aliases, classes = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/alias_ast_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply name aliases to AST nodes ‚Äî alias_ast_names","text":"ast AST object list. aliases named list character vector. Keys aliases, values original names. classes Character vector AST classes filter (optional).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/alias_ast_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply name aliases to AST nodes ‚Äî alias_ast_names","text":"Modified AST aliases applied.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/annotate_brackets.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate expression tree with bracket requirements ‚Äî annotate_brackets","title":"Annotate expression tree with bracket requirements ‚Äî annotate_brackets","text":"Annotate expression tree bracket requirements","code":""},{"path":"https://optimal2050.github.io/multimod/reference/annotate_brackets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate expression tree with bracket requirements ‚Äî annotate_brackets","text":"","code":"annotate_brackets(expr, parent = NULL, side = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/as_gams.equation.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert equation to GAMS syntax ‚Äî as_gams.equation","title":"Convert equation to GAMS syntax ‚Äî as_gams.equation","text":"Render equation object GAMS equation string.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_gams.equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert equation to GAMS syntax ‚Äî as_gams.equation","text":"","code":"as_gams.equation(eqn)"},{"path":"https://optimal2050.github.io/multimod/reference/as_gams.equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert equation to GAMS syntax ‚Äî as_gams.equation","text":"eqn equation object.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_gams.equation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert equation to GAMS syntax ‚Äî as_gams.equation","text":"character string valid GAMS syntax.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_gams.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert multimod object to GAMS syntax ‚Äî as_gams","title":"Convert multimod object to GAMS syntax ‚Äî as_gams","text":"Render multimod object GAMS code string.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_gams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert multimod object to GAMS syntax ‚Äî as_gams","text":"","code":"as_gams(x, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/as_gams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert multimod object to GAMS syntax ‚Äî as_gams","text":"x multimod object. ... Additional arguments (used).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_gams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert multimod object to GAMS syntax ‚Äî as_gams","text":"character string valid GAMS syntax.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_jump.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert multimod object to Julia/JuMP syntax ‚Äî as_jump","title":"Convert multimod object to Julia/JuMP syntax ‚Äî as_jump","text":"Render multimod object JuMP code string.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_jump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert multimod object to Julia/JuMP syntax ‚Äî as_jump","text":"","code":"as_jump(x, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/as_jump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert multimod object to Julia/JuMP syntax ‚Äî as_jump","text":"x multimod object. ... Additional arguments (used).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_jump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert multimod object to Julia/JuMP syntax ‚Äî as_jump","text":"character string valid Julia/JuMP syntax.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_latex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert objects to LaTeX format ‚Äî as_latex","title":"Convert objects to LaTeX format ‚Äî as_latex","text":"Convert objects LaTeX format Convert character string LaTeX-safe format","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert objects to LaTeX format ‚Äî as_latex","text":"","code":"as_latex(x, ...)  # Default S3 method as_latex(x, ...)  # S3 method for class 'character' as_latex(x, math = FALSE, bold = FALSE, italic = FALSE)  # S3 method for class 'set' as_latex(x, math_env = \"text\", ...)  # S3 method for class 'dims' as_latex(x, brackets = NULL, ...)  # S3 method for class 'expression' as_latex(x, brackets = NULL, subscript_dims = is.null(brackets), ...)  # S3 method for class 'parameter' as_latex(x, brackets = NULL, subscript_dims = is.null(brackets), ...)  # S3 method for class 'variable' as_latex(x, brackets = NULL, subscript_dims = TRUE, ...)  # S3 method for class 'symbol' as_latex(x, ...)  # S3 method for class 'constant' as_latex(x, ...)  # S3 method for class 'unary' as_latex(x, brackets = NULL, ...)  # S3 method for class 'expression' as_latex(x, brackets = NULL, ...)  # S3 method for class 'when' as_latex(   x,   brackets = NULL,   use_indicator = getOption(\"multimod.latex.use_indicator\", FALSE),   indicator_symbol = getOption(\"multimod.latex.indicator_symbol\", \"\\\\delta\"),   ... )  # S3 method for class 'sum' as_latex(x, brackets = NULL, ...)  # S3 method for class 'prod' as_latex(x, brackets = NULL, ...)  # S3 method for class 'func' as_latex(x, brackets = NULL, subscript_dims = TRUE, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/as_latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert objects to LaTeX format ‚Äî as_latex","text":"x character string (vector strings) converted LaTeX. math Logical; TRUE, wraps result math mode ($...$). bold Logical; TRUE, wraps text \\\\textbf{...}. italic Logical; TRUE, wraps text \\\\textit{...}.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_latex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert objects to LaTeX format ‚Äî as_latex","text":"character vector LaTeX-safe strings.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_latex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert objects to LaTeX format ‚Äî as_latex","text":"","code":"as_latex(\"alpha & beta_1 = 0.5%\") #> [1] \"alpha \\\\& beta\\\\_1 = 0.5\\\\%\" as_latex(\"theta\", math = TRUE) #> [1] \"$theta$\" as_latex(\"Note:\", bold = TRUE, italic = TRUE) #> [1] \"\\\\textit{\\\\textbf{Note:}}\""},{"path":"https://optimal2050.github.io/multimod/reference/as_multimod.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a multimod structure ‚Äî as_multimod","title":"Convert an object to a multimod structure ‚Äî as_multimod","text":"generic function converts object multimod-compatible format.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_multimod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a multimod structure ‚Äî as_multimod","text":"","code":"as_multimod(x, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/as_multimod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a multimod structure ‚Äî as_multimod","text":"x object convert. ... Additional arguments passed methods.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_multimod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a multimod structure ‚Äî as_multimod","text":"multimod object.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_rexpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert AST to R expression ‚Äî as_rexpression","title":"Convert AST to R expression ‚Äî as_rexpression","text":"Convert AST R expression","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_rexpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert AST to R expression ‚Äî as_rexpression","text":"","code":"as_rexpression(x, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/as_rexpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert AST to R expression ‚Äî as_rexpression","text":"x AST node","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_rexpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert AST to R expression ‚Äî as_rexpression","text":"character string representing R expression","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_visNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a multimod ast or equation to a visNetwork object ‚Äî as_visNetwork","title":"Convert a multimod ast or equation to a visNetwork object ‚Äî as_visNetwork","text":"Convert multimod ast equation visNetwork object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/as_visNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a multimod ast or equation to a visNetwork object ‚Äî as_visNetwork","text":"","code":"as_visNetwork(expr)  # S3 method for class 'equation' as_visNetwork(eq, title = NULL, alias_map = NULL, show_dims = FALSE)"},{"path":"https://optimal2050.github.io/multimod/reference/as_visNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a multimod ast or equation to a visNetwork object ‚Äî as_visNetwork","text":"expr multimod object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_cond.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_cond","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_cond","text":"function constructs conditional expression node type \"cond\", representing GAMS-style conditional terms using $ operator.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_cond","text":"","code":"ast_cond(then, condition)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_cond","text":"expression evaluate condition true (usually left-hand side). condition condition check (right-hand side $). Must AST node.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_cond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_cond","text":"object class multimod_ast subclass ast_cond","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_cond","text":"","code":"ast_cond(   then = ast_var(\"x\", c(\"i\")),   condition = ast_symbol(\"i_active(i)\") ) #> <multimod_ast>  #> [1] \"if (i_active(i)) {x[i]}\""},{"path":"https://optimal2050.github.io/multimod/reference/ast_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_condition","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_condition","text":"function constructs conditional expression node type \"condition\", representing GAMS-style conditional terms using $ operator.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_condition","text":"","code":"ast_condition(condition, then)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_condition","text":"condition condition check (right-hand side $). Must AST node. expression evaluate condition true (usually left-hand side).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_condition","text":"object class multimod_ast subclass ast_condition","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_condition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a conditional (dollar) expression node for multimod AST ‚Äî ast_condition","text":"","code":"ast_condition(   condition = ast_symbol(\"i_active(i)\"),   then = ast_variable(\"x\", c(\"i\")) ) #> <AST condition>  #>   then : #> <AST variable> x #>   dims:  i  #>   condition: #> <AST symbol>"},{"path":"https://optimal2050.github.io/multimod/reference/ast_const.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a constant AST node ‚Äî ast_const","title":"Create a constant AST node ‚Äî ast_const","text":"Create constant AST node","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_const.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a constant AST node ‚Äî ast_const","text":"","code":"ast_const(value)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_const.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a constant AST node ‚Äî ast_const","text":"value numeric character constant.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_const.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a constant AST node ‚Äî ast_const","text":"ast_const S3 object (subclass multimod_ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a constant AST node ‚Äî ast_constant","title":"Create a constant AST node ‚Äî ast_constant","text":"Create constant AST node","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a constant AST node ‚Äî ast_constant","text":"","code":"ast_constant(value, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a constant AST node ‚Äî ast_constant","text":"value numeric character constant.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a constant AST node ‚Äî ast_constant","text":"constant S3 object (subclass ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an AST node for dimensions (dims) of a symbol ‚Äî ast_dims","title":"Create an AST node for dimensions (dims) of a symbol ‚Äî ast_dims","text":"Constructs dims object, represents declared dimensions variable, parameter, equation structured symbolic model. dimension typically represented set reference (set) symbolic identifier (symbol). similar index, specifically dimensions.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an AST node for dimensions (dims) of a symbol ‚Äî ast_dims","text":"","code":"ast_dims(...)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an AST node for dimensions (dims) of a symbol ‚Äî ast_dims","text":"... One dimension expressions, typically created using ast_set() ast_symbol(). Expected AST objects character strings, comma-separated. character strings provided, converted symbol objects.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an AST node for dimensions (dims) of a symbol ‚Äî ast_dims","text":"list class dims ast, representing dimension nodes.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_dims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an AST node for dimensions (dims) of a symbol ‚Äî ast_dims","text":"","code":"ast_dims(list(ast_set(\"tech\"), ast_set(\"region\"))) #> <AST dims>  #> [tech,region] ast_dims(ast_symbol(\"t\")) #> <AST dims>  #> [t]"},{"path":"https://optimal2050.github.io/multimod/reference/ast_equation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an equation AST node ‚Äî ast_equation","title":"Create an equation AST node ‚Äî ast_equation","text":"Constructs equation node representing mathematical equation. node includes left-hand side (LHS), right-hand side (RHS), relation operator (e.g., equality inequality), optional domain (e.g., mapping, expression logical condition).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an equation AST node ‚Äî ast_equation","text":"","code":"ast_equation(   lhs,   rhs,   relation = \"==\",   name = NULL,   domain = NULL,   desc = NULL )"},{"path":"https://optimal2050.github.io/multimod/reference/ast_equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an equation AST node ‚Äî ast_equation","text":"lhs left-hand side equation (AST node). rhs right-hand side equation (AST node). relation character string representing relation type. One \"==\", \"<=\", \">=\". @param name Optional character string. name equation. @param domain Optional AST node representing domain condition. @param desc Optional character string. description label equation. @return equation S3 object. @export","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an expression AST node ‚Äî ast_expr","title":"Create an expression AST node ‚Äî ast_expr","text":"Constructs binary operation node representing expression addition, multiplication, etc.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an expression AST node ‚Äî ast_expr","text":"","code":"ast_expr(op, left, right)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an expression AST node ‚Äî ast_expr","text":"op character string representing operator (e.g., +, *, /). left left-hand side AST node. right right-hand side AST node.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an expression AST node ‚Äî ast_expr","text":"ast_expr S3 object (subclass multimod_ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an expression AST node ‚Äî ast_expression","title":"Create an expression AST node ‚Äî ast_expression","text":"Constructs binary operation node representing expression addition, multiplication, etc.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an expression AST node ‚Äî ast_expression","text":"","code":"ast_expression(op, lhs, rhs, brackets = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an expression AST node ‚Äî ast_expression","text":"op character string representing operator (e.g., +, *, /). lhs left-hand side AST node. rhs right-hand side AST node.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an expression AST node ‚Äî ast_expression","text":"expression S3 object (subclass ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a function AST node ‚Äî ast_func","title":"Create a function AST node ‚Äî ast_func","text":"Constructs abstract syntax tree (AST) node representing function.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a function AST node ‚Äî ast_func","text":"","code":"ast_func(name, value)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a function AST node ‚Äî ast_func","text":"name character string representing function name. value AST node representing function body expression.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a function AST node ‚Äî ast_func","text":"ast object class function.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a mapping AST node ‚Äî ast_mapping","title":"Create a mapping AST node ‚Äî ast_mapping","text":"Constructs mapping node representing mapping set indices.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a mapping AST node ‚Äî ast_mapping","text":"","code":"ast_mapping(name, dims = ast_dims(), ...)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a mapping AST node ‚Äî ast_mapping","text":"name character string representing mapping name. dims dims object representing dimensions mapping.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a mapping AST node ‚Äî ast_mapping","text":"mapping S3 object (subclass ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parameter AST node ‚Äî ast_param","title":"Create a parameter AST node ‚Äî ast_param","text":"Create parameter AST node","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parameter AST node ‚Äî ast_param","text":"","code":"ast_param(name, args = character())"},{"path":"https://optimal2050.github.io/multimod/reference/ast_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parameter AST node ‚Äî ast_param","text":"name Name parameter. args Optional vector dimension names (subscripts).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parameter AST node ‚Äî ast_param","text":"ast_param S3 object (subclass multimod_ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parameter AST node ‚Äî ast_parameter","title":"Create a parameter AST node ‚Äî ast_parameter","text":"Create parameter AST node","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parameter AST node ‚Äî ast_parameter","text":"","code":"ast_parameter(name, dims = ast_dims(), ...)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parameter AST node ‚Äî ast_parameter","text":"name Name parameter. dims Optional vector dimension dims objects.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parameter AST node ‚Äî ast_parameter","text":"parameter S3 object (subclass ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a product AST node ‚Äî ast_prod","title":"Create a product AST node ‚Äî ast_prod","text":"Constructs abstract syntax tree (AST) node representing product index. index typically set, dims object filtering applied index.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_prod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a product AST node ‚Äî ast_prod","text":"","code":"ast_prod(index, value)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_prod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a product AST node ‚Äî ast_prod","text":"index Character. index variable (e.g., \"t\"). value AST node representing expression summed.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_prod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a product AST node ‚Äî ast_prod","text":"object class ast prod.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summation AST node ‚Äî ast_sum","title":"Create a summation AST node ‚Äî ast_sum","text":"Constructs abstract syntax tree (AST) node representing summation index. index typically set, dims object filtering applied index.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summation AST node ‚Äî ast_sum","text":"","code":"ast_sum(index = ast_dims(), value)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summation AST node ‚Äî ast_sum","text":"index Character. index variable (e.g., \"t\"). value AST node representing expression summed.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a summation AST node ‚Äî ast_sum","text":"object class ast sum.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_symbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a symbol AST node (for unclassified identifiers) ‚Äî ast_symbol","title":"Create a symbol AST node (for unclassified identifiers) ‚Äî ast_symbol","text":"Create symbol AST node (unclassified identifiers)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_symbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a symbol AST node (for unclassified identifiers) ‚Äî ast_symbol","text":"","code":"ast_symbol(name, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_symbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a symbol AST node (for unclassified identifiers) ‚Äî ast_symbol","text":"name character string representing symbol.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_symbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a symbol AST node (for unclassified identifiers) ‚Äî ast_symbol","text":"symbol S3 object (subclass ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_unary.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a unary expression AST node ‚Äî ast_unary","title":"Create a unary expression AST node ‚Äî ast_unary","text":"Represents unary operator \"-\" \"\" applied single argument.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_unary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unary expression AST node ‚Äî ast_unary","text":"","code":"ast_unary(op, rhs)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_unary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a unary expression AST node ‚Äî ast_unary","text":"op Character string. unary operator, e.g., \"-\" \"\". rhs operand (ast object).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_unary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unary expression AST node ‚Äî ast_unary","text":"object class ast unary.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_unary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a unary expression AST node ‚Äî ast_unary","text":"","code":"ast <- ast_unary(\"-\", ast_symbol(\"x\")) str(ast) #> List of 2 #>  $ op : chr \"-\" #>  $ rhs:List of 1 #>   ..$ name: chr \"x\" #>   ..- attr(*, \"class\")= chr [1:2] \"symbol\" \"ast\" #>  - attr(*, \"class\")= chr [1:2] \"unary\" \"ast\" ast_unary(\"not\", ast_symbol(\"x\")) #> <AST unary> #>   Operator: not #>   Argument: #> <AST symbol>"},{"path":"https://optimal2050.github.io/multimod/reference/ast_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a variable AST node ‚Äî ast_var","title":"Create a variable AST node ‚Äî ast_var","text":"Create variable AST node","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a variable AST node ‚Äî ast_var","text":"","code":"ast_var(name, args = character())"},{"path":"https://optimal2050.github.io/multimod/reference/ast_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a variable AST node ‚Äî ast_var","text":"name Name variable. args Optional vector dimension names (subscripts).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a variable AST node ‚Äî ast_var","text":"ast_var S3 object (subclass multimod_ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a variable AST node ‚Äî ast_variable","title":"Create a variable AST node ‚Äî ast_variable","text":"Create variable AST node","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a variable AST node ‚Äî ast_variable","text":"","code":"ast_variable(name, dims = ast_dims(), ...)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a variable AST node ‚Äî ast_variable","text":"name Name variable. dims Optional vector dimension dims objects.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a variable AST node ‚Äî ast_variable","text":"variable S3 object (subclass ast).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_when.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a conditional expression node for multimod AST ‚Äî ast_when","title":"Construct a conditional expression node for multimod AST ‚Äî ast_when","text":"function constructs conditional expression node type \"\", representing GAMS-style conditional terms using $ operator, ... else ... statements Julia/JuMP,  ... ... Python/Pyomo, etc.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_when.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a conditional expression node for multimod AST ‚Äî ast_when","text":"","code":"ast_when(condition, then, otherwise = NULL, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_when.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a conditional expression node for multimod AST ‚Äî ast_when","text":"condition condition check, must AST node. expression evaluate condition true (usually left-hand side). otherwise Optional expression evaluate condition false. part available GAMS $ statements, useful languages.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_when.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a conditional expression node for multimod AST ‚Äî ast_when","text":"object class ast subclass .","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_when.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a conditional expression node for multimod AST ‚Äî ast_when","text":"","code":"ast_when(   condition = ast_symbol(\"i_active(i)\"),   then = ast_variable(\"x\", c(\"i\")) ) #> <AST when>  #>   condition: #> <AST symbol>  #>   then : #> <AST variable> x #>   dims:  i  #>   otherwise : #> NULL"},{"path":"https://optimal2050.github.io/multimod/reference/ast_where.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ","title":"Create a ","text":"Constructs \"\" node representing reference specific location abstract syntax tree (AST).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/ast_where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ","text":"","code":"ast_where(name, content, hash = node_hash(content), ...)"},{"path":"https://optimal2050.github.io/multimod/reference/ast_where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ","text":"name character string representing name reference, matching name symbol replacing AST node branch AST. ...","code":""},{"path":"https://optimal2050.github.io/multimod/reference/brackets_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a pair of brackets ‚Äî brackets_pair","title":"Get a pair of brackets ‚Äî brackets_pair","text":"function returns pair brackets based input character.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/brackets_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a pair of brackets ‚Äî brackets_pair","text":"","code":"brackets_pair(x)"},{"path":"https://optimal2050.github.io/multimod/reference/brackets_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a pair of brackets ‚Äî brackets_pair","text":"x character string vector length 1 2. length 1, return pair brackets based character. length 2, return two characters vector.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/brackets_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a pair of brackets ‚Äî brackets_pair","text":"character vector length 2 containing opening closing brackets.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the depth of a nested list structure (AST, multimod, and other objects) ‚Äî depth","title":"Get the depth of a nested list structure (AST, multimod, and other objects) ‚Äî depth","text":"function calculates depth nested list structure. Wrapper purrr::pluck_depth.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the depth of a nested list structure (AST, multimod, and other objects) ‚Äî depth","text":"","code":"depth(x)"},{"path":"https://optimal2050.github.io/multimod/reference/depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the depth of a nested list structure (AST, multimod, and other objects) ‚Äî depth","text":"x list nested list structure.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the depth of a nested list structure (AST, multimod, and other objects) ‚Äî depth","text":"integer representing depth list.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/estimate_latex_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the length of a LaTeX string ‚Äî estimate_latex_length","title":"Estimate the length of a LaTeX string ‚Äî estimate_latex_length","text":"Estimate length LaTeX string","code":""},{"path":"https://optimal2050.github.io/multimod/reference/estimate_latex_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the length of a LaTeX string ‚Äî estimate_latex_length","text":"","code":"estimate_latex_length(latex_str)"},{"path":"https://optimal2050.github.io/multimod/reference/extract_ast_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively extract elements by name from a nested structure ‚Äî extract_ast_elements","title":"Recursively extract elements by name from a nested structure ‚Äî extract_ast_elements","text":"Recursively extract elements name nested structure","code":""},{"path":"https://optimal2050.github.io/multimod/reference/extract_ast_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively extract elements by name from a nested structure ‚Äî extract_ast_elements","text":"","code":"extract_ast_elements(obj, name, recursive = TRUE)"},{"path":"https://optimal2050.github.io/multimod/reference/extract_ast_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively extract elements by name from a nested structure ‚Äî extract_ast_elements","text":"obj nested list S3 object (e.g., multimod ast node) name Character string slot/element extract (e.g., \"\") recursive Logical, whether search recursively nested objects","code":""},{"path":"https://optimal2050.github.io/multimod/reference/extract_ast_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively extract elements by name from a nested structure ‚Äî extract_ast_elements","text":"list matching elements","code":""},{"path":"https://optimal2050.github.io/multimod/reference/extract_ast_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recursively extract elements by name from a nested structure ‚Äî extract_ast_elements","text":"","code":"extract_elements_by_name(model, \"when\") #> Error in extract_elements_by_name(model, \"when\"): could not find function \"extract_elements_by_name\""},{"path":"https://optimal2050.github.io/multimod/reference/extract_visnetwork_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract visNetwork-compatible nodes and edges from a multimod_equation ‚Äî extract_visnetwork_data","title":"Extract visNetwork-compatible nodes and edges from a multimod_equation ‚Äî extract_visnetwork_data","text":"Extract visNetwork-compatible nodes edges multimod_equation","code":""},{"path":"https://optimal2050.github.io/multimod/reference/extract_visnetwork_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract visNetwork-compatible nodes and edges from a multimod_equation ‚Äî extract_visnetwork_data","text":"","code":"extract_visnetwork_data(eqn, alias_map = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/extract_visnetwork_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract visNetwork-compatible nodes and edges from a multimod_equation ‚Äî extract_visnetwork_data","text":"eqn multimod_equation object alias_map Optional named list rename variable/parameter/index names","code":""},{"path":"https://optimal2050.github.io/multimod/reference/extract_visnetwork_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract visNetwork-compatible nodes and edges from a multimod_equation ‚Äî extract_visnetwork_data","text":"list elements: nodes, edges, title, subtitle","code":""},{"path":"https://optimal2050.github.io/multimod/reference/extract_where_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract ","title":"Extract ","text":"Extract \"\" nodes AST","code":""},{"path":"https://optimal2050.github.io/multimod/reference/extract_where_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract ","text":"","code":"extract_where_nodes(ast)"},{"path":"https://optimal2050.github.io/multimod/reference/format_latex_aligned.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a LaTeX equation across multiple lines using aligned ‚Äî format_latex_aligned","title":"Format a LaTeX equation across multiple lines using aligned ‚Äî format_latex_aligned","text":"Format LaTeX equation across multiple lines using aligned","code":""},{"path":"https://optimal2050.github.io/multimod/reference/format_latex_aligned.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a LaTeX equation across multiple lines using aligned ‚Äî format_latex_aligned","text":"","code":"format_latex_aligned(lhs, rhs, rel = \"=\", max_len = 80)"},{"path":"https://optimal2050.github.io/multimod/reference/format_latex_aligned.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a LaTeX equation across multiple lines using aligned ‚Äî format_latex_aligned","text":"lhs LaTeX string left-hand side rhs LaTeX string right-hand side rel Relational operator (e.g., =, \\le, \\ge) max_len Maximum allowed line length splitting","code":""},{"path":"https://optimal2050.github.io/multimod/reference/format_latex_aligned.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a LaTeX equation across multiple lines using aligned ‚Äî format_latex_aligned","text":"Character string formatted LaTeX code","code":""},{"path":"https://optimal2050.github.io/multimod/reference/get_network_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get network data for a multimod equation ‚Äî get_network_data","title":"Get network data for a multimod equation ‚Äî get_network_data","text":"Get network data multimod equation","code":""},{"path":"https://optimal2050.github.io/multimod/reference/get_network_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get network data for a multimod equation ‚Äî get_network_data","text":"","code":"get_network_data(eq, alias_map = NULL, show_dims = TRUE)"},{"path":"https://optimal2050.github.io/multimod/reference/get_network_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get network data for a multimod equation ‚Äî get_network_data","text":"eq multimod equation object alias_map named list alias mapping (optional) show_dims Logical, whether show dimensions label (default: FALSE)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/get_network_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get network data for a multimod equation ‚Äî get_network_data","text":"list two data frames: nodes edges used visNetwork similar packages visualization.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a string is a compound expression ‚Äî is_expression","title":"Check if a string is a compound expression ‚Äî is_expression","text":"Check string compound expression","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a string is a compound expression ‚Äî is_expression","text":"","code":"is_expression(   s,   ops = c(\"+\", \"-\", \"*\", \"/\", \"^\", \"=\", \"==\", \"<\", \"<=\", \">\", \">=\", \"=e=\", \"=l=\", \"=g=\",     \"=le=\", \"=ge=\", \"and\", \"or\", \"not\") )"},{"path":"https://optimal2050.github.io/multimod/reference/is_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a string is a compound expression ‚Äî is_expression","text":"s Character string (GAMS-like expression) ops Character vector known operators (defaults: arithmetic, logical, relational)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a string is a compound expression ‚Äî is_expression","text":"Logical: TRUE expression, FALSE atomic","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a string is a compound expression ‚Äî is_expression","text":"","code":"is_expression(\"x + y\") # TRUE #> Error in find_top_level_operators(s, ops = ops): Invalid/Unrecognized operator: =le= is_expression(\"x\") # FALSE #> Error in find_top_level_operators(s, ops = ops): Invalid/Unrecognized operator: =le="},{"path":"https://optimal2050.github.io/multimod/reference/is_special.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a character is a special character ‚Äî is_special","title":"Check if a character is a special character ‚Äî is_special","text":"Check character special character","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_special.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a character is a special character ‚Äî is_special","text":"","code":"is_special(ch)"},{"path":"https://optimal2050.github.io/multimod/reference/is_special.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a character is a special character ‚Äî is_special","text":"ch character string check.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_special.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a character is a special character ‚Äî is_special","text":"logical value indicating whether character special character.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_special.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a character is a special character ‚Äî is_special","text":"","code":"is_special(\"!\") # TRUE #> [1] TRUE is_special(\"a\") # FALSE #> [1] FALSE is_special(\"1\") # FALSE #> [1] FALSE is_special(1) # FALSE #> [1] FALSE is_special(\"#\") # TRUE #> [1] TRUE"},{"path":"https://optimal2050.github.io/multimod/reference/is_word.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a string is a word (alphabetic characters only) ‚Äî is_word","title":"Check if a string is a word (alphabetic characters only) ‚Äî is_word","text":"function tests whether input string consists entirely letters (‚Äìz, ‚ÄìZ) digits, punctuation, special characters.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_word.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a string is a word (alphabetic characters only) ‚Äî is_word","text":"","code":"is_word(ch)"},{"path":"https://optimal2050.github.io/multimod/reference/is_word.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a string is a word (alphabetic characters only) ‚Äî is_word","text":"ch character string vector strings test.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_word.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a string is a word (alphabetic characters only) ‚Äî is_word","text":"logical vector length ch, element TRUE corresponding string consists letters, FALSE otherwise.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_word.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a string is a word (alphabetic characters only) ‚Äî is_word","text":"","code":"is_word(\"alpha\")     # TRUE #> [1] TRUE is_word(\"123\")       # FALSE #> [1] FALSE is_word(\"var_1\")     # FALSE #> [1] FALSE is_word(c(\"a\", \"B\", \"C3\"))  # TRUE, TRUE, FALSE #> [1]  TRUE  TRUE FALSE"},{"path":"https://optimal2050.github.io/multimod/reference/is_word_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a string is alphanumeric (letters, digits, or underscores) ‚Äî is_word_num","title":"Check if a string is alphanumeric (letters, digits, or underscores) ‚Äî is_word_num","text":"function tests whether input string consists entirely letters (‚Äìz, ‚ÄìZ), digits (0‚Äì9), underscores (_).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_word_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a string is alphanumeric (letters, digits, or underscores) ‚Äî is_word_num","text":"","code":"is_word_num(ch)"},{"path":"https://optimal2050.github.io/multimod/reference/is_word_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a string is alphanumeric (letters, digits, or underscores) ‚Äî is_word_num","text":"ch character string vector strings test.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_word_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a string is alphanumeric (letters, digits, or underscores) ‚Äî is_word_num","text":"logical vector length ch, element TRUE corresponding string contains alphanumeric characters underscores, FALSE otherwise.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/is_word_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a string is alphanumeric (letters, digits, or underscores) ‚Äî is_word_num","text":"","code":"is_word_num(\"alpha123\")     # TRUE #> [1] TRUE is_word_num(\"var_1\")        # TRUE #> [1] TRUE is_word_num(\"a-b\")          # FALSE #> [1] FALSE is_word_num(c(\"abc\", \"123\", \"a_b\", \"x-y\"))  # TRUE, TRUE, TRUE, FALSE #> [1]  TRUE  TRUE  TRUE FALSE"},{"path":"https://optimal2050.github.io/multimod/reference/latex_bracket_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate bracket size for LaTeX based on context and expression content ‚Äî latex_bracket_size","title":"Estimate bracket size for LaTeX based on context and expression content ‚Äî latex_bracket_size","text":"Estimate bracket size LaTeX based context expression content","code":""},{"path":"https://optimal2050.github.io/multimod/reference/latex_bracket_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate bracket size for LaTeX based on context and expression content ‚Äî latex_bracket_size","text":"","code":"latex_bracket_size(content, context = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/latex_bracket_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate bracket size for LaTeX based on context and expression content ‚Äî latex_bracket_size","text":"content LaTeX string (expression inside brackets) context Optional context string (e.g., \"sum\", \"prod\", NULL)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/latex_bracket_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate bracket size for LaTeX based on context and expression content ‚Äî latex_bracket_size","text":"LaTeX bracket size prefix (e.g., \"\", \"\\big\", \"\\Big\", etc.)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/latex_math_brakets.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate LaTeX brackets for math expressions ‚Äî latex_math_brakets","title":"Generate LaTeX brackets for math expressions ‚Äî latex_math_brakets","text":"Generate LaTeX brackets math expressions","code":""},{"path":"https://optimal2050.github.io/multimod/reference/latex_math_brakets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate LaTeX brackets for math expressions ‚Äî latex_math_brakets","text":"","code":"latex_math_brakets(content = NULL, context = NULL, size = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/latex_math_brakets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate LaTeX brackets for math expressions ‚Äî latex_math_brakets","text":"content LaTeX string (expression inside brackets) context Optional context string (e.g., \"sum\", \"prod\", NULL) size Optional size prefix brackets pass (e.g., \"\", \"\\\\big\", \"\\\\Big\", \"\\\\bigg\", \"\\\\Bigg\")","code":""},{"path":"https://optimal2050.github.io/multimod/reference/latex_math_brakets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate LaTeX brackets for math expressions ‚Äî latex_math_brakets","text":"character vector two elements: open close","code":""},{"path":"https://optimal2050.github.io/multimod/reference/latex_top_level_operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify top-level LaTeX operators in an expression ‚Äî latex_top_level_operators","title":"Identify top-level LaTeX operators in an expression ‚Äî latex_top_level_operators","text":"Identify top-level LaTeX operators expression","code":""},{"path":"https://optimal2050.github.io/multimod/reference/latex_top_level_operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify top-level LaTeX operators in an expression ‚Äî latex_top_level_operators","text":"","code":"latex_top_level_operators(   latex_str,   operators = c(\"+\", \"-\", \"\\\\\\\\cdot\", \"\\\\\\\\div\", \"=\") )"},{"path":"https://optimal2050.github.io/multimod/reference/latex_top_level_operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify top-level LaTeX operators in an expression ‚Äî latex_top_level_operators","text":"latex_str LaTeX math string operators Vector operators detect top level","code":""},{"path":"https://optimal2050.github.io/multimod/reference/latex_top_level_operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify top-level LaTeX operators in an expression ‚Äî latex_top_level_operators","text":"Data frame matched operators positions","code":""},{"path":"https://optimal2050.github.io/multimod/reference/map_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively apply a function to all nodes of an AST ‚Äî map_ast","title":"Recursively apply a function to all nodes of an AST ‚Äî map_ast","text":"Recursively apply function nodes AST","code":""},{"path":"https://optimal2050.github.io/multimod/reference/map_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively apply a function to all nodes of an AST ‚Äî map_ast","text":"","code":"map_ast(node, func, include_class = TRUE)"},{"path":"https://optimal2050.github.io/multimod/reference/map_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively apply a function to all nodes of an AST ‚Äî map_ast","text":"node AST node list nodes. func function apply node. return scalar structured value. include_class Logical: TRUE, include class name part result tree.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/map_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively apply a function to all nodes of an AST ‚Äî map_ast","text":"tree structure values replaced func(node)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/multimod-package.html","id":null,"dir":"Reference","previous_headings":"","what":"multimod: Define and Render Mathematical Models Across Multiple Optimization Languages. ‚Äî multimod-package","title":"multimod: Define and Render Mathematical Models Across Multiple Optimization Languages. ‚Äî multimod-package","text":"Multimod provides domain-specific language (DSL) defining algebraic equations constraints R, rendering multiple mathematical programming languages, including GAMS, AMPL, Pyomo, JuMP. supports structured storage equations, parameters, sets, mappings, aims simplify development complex optimization models across platforms.","code":""},{"path":[]},{"path":"https://optimal2050.github.io/multimod/reference/multimod-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"multimod: Define and Render Mathematical Models Across Multiple Optimization Languages. ‚Äî multimod-package","text":"Maintainer: Oleg Lugovoy olugovoy@optimalsolution.dev (ORCID)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod model object ‚Äî new_model","title":"Create a multimod model object ‚Äî new_model","text":"Create multimod model object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod model object ‚Äî new_model","text":"","code":"new_model(   name = NULL,   desc = NULL,   sets = list(),   aliases = list(),   mappings = list(),   parameters = list(),   variables = list(),   equations = list(),   ... )"},{"path":"https://optimal2050.github.io/multimod/reference/new_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod model object ‚Äî new_model","text":"desc  sets named list sets mappings named list mappings parameters named list parameter objects variables named list variable objects equations named list equation objects","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an AST node representing a set ‚Äî ast_set","title":"Create an AST node representing a set ‚Äî ast_set","text":"Constructs set object used index domain symbols (e.g., mappings, parameters, variables, equations).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an AST node representing a set ‚Äî ast_set","text":"","code":"ast_set(name)"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an AST node representing a set ‚Äî ast_set","text":"name Character. Name set (e.g., \"b\").","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an AST node representing a set ‚Äî ast_set","text":"object class multimod_ast ast_set","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an AST node representing a set ‚Äî ast_set","text":"","code":"ast_set(\"b\")                     # standalone set #> <AST set> b ast_set(\"b\", domain = ast_set(\"a\"))  # subset declaration b ‚äÜ a #> Error in ast_set(\"b\", domain = ast_set(\"a\")): unused argument (domain = ast_set(\"a\"))"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_eqn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod equation object ‚Äî new_multimod_eqn","title":"Create a multimod equation object ‚Äî new_multimod_eqn","text":"Create multimod equation object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_eqn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod equation object ‚Äî new_multimod_eqn","text":"","code":"new_multimod_eqn(   name,   desc = NULL,   dims,   lhs,   rhs,   relation = \"==\",   domain = NULL )"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_eqn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod equation object ‚Äî new_multimod_eqn","text":"desc","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_equation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod equation object ‚Äî new_multimod_equation","title":"Create a multimod equation object ‚Äî new_multimod_equation","text":"Constructs equation object used multimod modeling framework. object represents single equation, including left-hand side (LHS), right-hand side (RHS), relation operator (e.g., equality inequality), optional domain.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod equation object ‚Äî new_multimod_equation","text":"","code":"new_multimod_equation(   name,   desc = NULL,   dims,   lhs,   rhs,   relation = \"==\",   domain = NULL )  new_equation(name, desc = NULL, dims, lhs, rhs, relation = \"==\", domain = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod equation object ‚Äî new_multimod_equation","text":"name Character string. name equation. desc Optional character string. description label equation. dims Character vector. Names dimensions equation declared. lhs AST (abstract syntax tree) representing left-hand side equation. rhs AST representing right-hand side equation. relation Character string. relation type: one \"==\", \"<=\", \">=\". domain Optional AST symbol representing domain/mapping condition equation.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_equation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multimod equation object ‚Äî new_multimod_equation","text":"object class multimod_equation, containing parsed equation structure.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_equation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a multimod equation object ‚Äî new_multimod_equation","text":"","code":"lhs <- ast_variable(\"vTechOut\", dims = c(\"tech\", \"region\")) rhs <- ast_expression(\"*\", ast_param(\"pTechEff\", dims = c(\"tech\")), ast_variable(\"vTechInp\", dims = c(\"tech\", \"region\"))) #> Error in ast_param(\"pTechEff\", dims = c(\"tech\")): could not find function \"ast_param\" eq <- new_multimod_equation(   name = \"eqTechEff\",   desc = \"Technology output efficiency\",   dims = c(\"tech\", \"region\"),   lhs = lhs,   rhs = rhs,   relation = \"==\" ) #> Error: object 'rhs' not found print(eq) #> Error: object 'eq' not found"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod mapping object ‚Äî new_multimod_mapping","title":"Create a multimod mapping object ‚Äî new_multimod_mapping","text":"Create multimod mapping object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod mapping object ‚Äî new_multimod_mapping","text":"","code":"new_multimod_mapping(   name,   desc = NULL,   subset_of = NULL,   dims = NULL,   active_dims = NULL,   data = NULL,   auto_fold = FALSE )"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod mapping object ‚Äî new_multimod_mapping","text":"name character, name mapping desc character, description mapping subset_of character, name parent mapping dims character vector, names declared dimensions data data frame, data mapping","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multimod mapping object ‚Äî new_multimod_mapping","text":"object class multimod_mapping","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod model object ‚Äî new_multimod_model","title":"Create a multimod model object ‚Äî new_multimod_model","text":"Create multimod model object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod model object ‚Äî new_multimod_model","text":"","code":"new_multimod_model(   name = NULL,   desc = NULL,   sets = list(),   aliases = list(),   mappings = list(),   parameters = list(),   variables = list(),   equations = list() )"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod model object ‚Äî new_multimod_model","text":"desc  sets named list sets mappings named list mappings parameters named list multimod_parameter objects variables named list multimod_variable objects equations named list multimod_equation objects","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod parameter ‚Äî new_multimod_param","title":"Create a multimod parameter ‚Äî new_multimod_param","text":"Create multimod parameter","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod parameter ‚Äî new_multimod_param","text":"","code":"new_multimod_param(   name,   desc = NULL,   dims,   active_dims = NULL,   data = NULL,   auto_fold = FALSE )"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod parameter ‚Äî new_multimod_param","text":"name character, name parameter dims character vector, names declared dimensions active_dims character vector, names active dimensions data data frame, data parameter auto_fold logical, whether automatically fold dimensions","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multimod parameter ‚Äî new_multimod_param","text":"multimod_param object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod parameter ‚Äî new_multimod_parameter","title":"Create a multimod parameter ‚Äî new_multimod_parameter","text":"Create multimod parameter","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod parameter ‚Äî new_multimod_parameter","text":"","code":"new_multimod_parameter(   name,   desc = NULL,   dims,   active_dims = NULL,   data = NULL,   auto_fold = FALSE )"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod parameter ‚Äî new_multimod_parameter","text":"name character, name parameter dims character vector, names declared dimensions active_dims character vector, names active dimensions data data frame, data parameter auto_fold logical, whether automatically fold dimensions","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multimod parameter ‚Äî new_multimod_parameter","text":"multimod_parameter object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new multimod_set object ‚Äî new_multimod_set","title":"Create a new multimod_set object ‚Äî new_multimod_set","text":"Create new multimod_set object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new multimod_set object ‚Äî new_multimod_set","text":"","code":"new_multimod_set(name, desc = NULL, subset_of = NULL, data = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new multimod_set object ‚Äî new_multimod_set","text":"name Character. Name set. desc Character. Description set (optional). subset_of Character vector. Name parent set (optional). data Optional values (e.g., character vector data.frame).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new multimod_set object ‚Äî new_multimod_set","text":"object class multimod_set","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod variable ‚Äî new_multimod_var","title":"Create a multimod variable ‚Äî new_multimod_var","text":"Create multimod variable","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod variable ‚Äî new_multimod_var","text":"","code":"new_multimod_var(   name,   desc = NULL,   dims,   data = NULL,   active_dims = NULL,   domain = \"continuous\",   auto_fold = TRUE )"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod variable ‚Äî new_multimod_var","text":"name character, name variable dims character vector, names declared dimensions data data frame, data variable active_dims character vector, names active dimensions domain character, domain variable (e.g., \"continuous\", \"integer\", \"binary\") auto_fold logical, whether automatically fold dimensions","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multimod variable ‚Äî new_multimod_var","text":"multimod_var object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimod variable ‚Äî new_multimod_variable","title":"Create a multimod variable ‚Äî new_multimod_variable","text":"Create multimod variable","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimod variable ‚Äî new_multimod_variable","text":"","code":"new_multimod_variable(   name,   desc = NULL,   dims,   data = NULL,   active_dims = NULL,   domain = \"continuous\",   auto_fold = TRUE )"},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimod variable ‚Äî new_multimod_variable","text":"name character, name variable dims character vector, names declared dimensions data data frame, data variable active_dims character vector, names active dimensions domain character, domain variable (e.g., \"continuous\", \"integer\", \"binary\") auto_fold logical, whether automatically fold dimensions","code":""},{"path":"https://optimal2050.github.io/multimod/reference/new_multimod_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multimod variable ‚Äî new_multimod_variable","text":"multimod_variable object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/node_hash.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a stable hash for an AST or multimod object (excluding internal hash fields) ‚Äî node_hash","title":"Generate a stable hash for an AST or multimod object (excluding internal hash fields) ‚Äî node_hash","text":"Generate stable hash AST multimod object (excluding internal hash fields)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/node_hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a stable hash for an AST or multimod object (excluding internal hash fields) ‚Äî node_hash","text":"","code":"node_hash(node, algo = NULL)"},{"path":"https://optimal2050.github.io/multimod/reference/node_hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a stable hash for an AST or multimod object (excluding internal hash fields) ‚Äî node_hash","text":"node ast object. algo Hashing algorithm. NULL, uses options(\"multimod.hash_algo\").","code":""},{"path":"https://optimal2050.github.io/multimod/reference/node_hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a stable hash for an AST or multimod object (excluding internal hash fields) ‚Äî node_hash","text":"character hash (e.g., \"42fca0dd\").","code":""},{"path":"https://optimal2050.github.io/multimod/reference/node_hash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a stable hash for an AST or multimod object (excluding internal hash fields) ‚Äî node_hash","text":"","code":"ast <- ast_expression(\"+\", ast_variable(\"x\"), ast_constant(5)) hash <- node_hash(ast)"},{"path":"https://optimal2050.github.io/multimod/reference/node_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the type of an AST or multimod node ‚Äî node_type","title":"Get the type of an AST or multimod node ‚Äî node_type","text":"function retrieves class AST node multimod object represents specific type node abstract syntax tree.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/node_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the type of an AST or multimod node ‚Äî node_type","text":"","code":"node_type(x)"},{"path":"https://optimal2050.github.io/multimod/reference/node_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the type of an AST or multimod node ‚Äî node_type","text":"x ast multimod object. case classes, return NULL.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/node_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the type of an AST or multimod node ‚Äî node_type","text":"character string representing type node (e.g., \"expression\", \"variable\", \"parameter\", \"sum\", etc.).","code":""},{"path":"https://optimal2050.github.io/multimod/reference/plot.ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a multimod AST using visNetwork ‚Äî plot.ast","title":"Plot a multimod AST using visNetwork ‚Äî plot.ast","text":"Plot multimod AST using visNetwork","code":""},{"path":"https://optimal2050.github.io/multimod/reference/plot.ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a multimod AST using visNetwork ‚Äî plot.ast","text":"","code":"# S3 method for class 'ast' plot(x, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/plot.ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a multimod AST using visNetwork ‚Äî plot.ast","text":"x ast object ... Additional arguments (currently unused)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/plot.ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a multimod AST using visNetwork ‚Äî plot.ast","text":"visNetwork plot","code":""},{"path":"https://optimal2050.github.io/multimod/reference/plot.multimod_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a multimod AST using visNetwork ‚Äî plot.multimod_ast","title":"Plot a multimod AST using visNetwork ‚Äî plot.multimod_ast","text":"Plot multimod AST using visNetwork","code":""},{"path":"https://optimal2050.github.io/multimod/reference/plot.multimod_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a multimod AST using visNetwork ‚Äî plot.multimod_ast","text":"","code":"# S3 method for class 'multimod_ast' plot(x, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/plot.multimod_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a multimod AST using visNetwork ‚Äî plot.multimod_ast","text":"x multimod_ast object ... Additional arguments (currently unused)","code":""},{"path":"https://optimal2050.github.io/multimod/reference/plot.multimod_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a multimod AST using visNetwork ‚Äî plot.multimod_ast","text":"visNetwork plot","code":""},{"path":[]},{"path":"https://optimal2050.github.io/multimod/reference/print.ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for AST classes ‚Äî print.ast","title":"Print methods for AST classes ‚Äî print.ast","text":"Print methods AST classes","code":""},{"path":"https://optimal2050.github.io/multimod/reference/print.ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for AST classes ‚Äî print.ast","text":"","code":"# S3 method for class 'ast' print(x, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/print.multimod_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for AST classes ‚Äî print.multimod_ast","title":"Print methods for AST classes ‚Äî print.multimod_ast","text":"Print methods AST classes","code":""},{"path":"https://optimal2050.github.io/multimod/reference/print.multimod_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for AST classes ‚Äî print.multimod_ast","text":"","code":"# S3 method for class 'multimod_ast' print(x, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/remap_ast_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace AST elements with ","title":"Replace AST elements with ","text":"function replaces elements given AST object \"ast_where\" nodes. useful long expressions improve readability latex output network trees. \"ast_where\" stores original expression $content slot, ignored parsers GAMS, Julia, languages.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/remap_ast_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace AST elements with ","text":"","code":"remap_ast_elements(   obj,   ast_type = list(when = \"condition\"),   name_prefix = \"m\",   n = 0L )"},{"path":"https://optimal2050.github.io/multimod/reference/remap_ast_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace AST elements with ","text":"obj object class ast, multimod, list. ast_type character vector AST types replaced (e.g., \"\", \"mapping\"). name_prefix character string prefix new names replaced elements. Defaults \"m\".","code":""},{"path":"https://optimal2050.github.io/multimod/reference/resolve_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve a dimension name to its alias ‚Äî resolve_alias","title":"Resolve a dimension name to its alias ‚Äî resolve_alias","text":"Resolve dimension name alias","code":""},{"path":"https://optimal2050.github.io/multimod/reference/resolve_alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve a dimension name to its alias ‚Äî resolve_alias","text":"","code":"resolve_alias(   name,   base = base_aliases,   extended = extended_aliases,   default = NULL )"},{"path":"https://optimal2050.github.io/multimod/reference/resolve_alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve a dimension name to its alias ‚Äî resolve_alias","text":"name character string vector dimension names. base Named list base aliases. extended Named list extended aliases. default alias found, return name, NA, \"?\".","code":""},{"path":"https://optimal2050.github.io/multimod/reference/resolve_alias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve a dimension name to its alias ‚Äî resolve_alias","text":"character vector resolved aliases.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/resolve_full_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve alias to full set name ‚Äî resolve_full_name","title":"Resolve alias to full set name ‚Äî resolve_full_name","text":"Resolve alias full set name","code":""},{"path":"https://optimal2050.github.io/multimod/reference/resolve_full_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve alias to full set name ‚Äî resolve_full_name","text":"","code":"resolve_full_name(   alias,   base = base_aliases,   extended = extended_aliases,   default = NULL )"},{"path":"https://optimal2050.github.io/multimod/reference/resolve_full_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve alias to full set name ‚Äî resolve_full_name","text":"alias character vector alias names (e.g., \"r\", \"yp\"). base Named list base aliases. extended Named list extended aliases. default Fallback alias found.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/resolve_full_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve alias to full set name ‚Äî resolve_full_name","text":"Character vector full names.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/split_at_top_level_operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Split LaTeX math string at top-level operators ‚Äî split_at_top_level_operators","title":"Split LaTeX math string at top-level operators ‚Äî split_at_top_level_operators","text":"function splits LaTeX math string given types top-level operators maximum length chunk. splitting done recursively respect operator order.","code":""},{"path":"https://optimal2050.github.io/multimod/reference/split_at_top_level_operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split LaTeX math string at top-level operators ‚Äî split_at_top_level_operators","text":"","code":"split_at_top_level_operators(   latex_str,   operators = c(\"+\", \"-\", \"\\\\cdot\", \"\\\\div\", \"=\"),   indent_str = character(0),   max_len = 80 )"},{"path":"https://optimal2050.github.io/multimod/reference/split_at_top_level_operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split LaTeX math string at top-level operators ‚Äî split_at_top_level_operators","text":"latex_str LaTeX math string operators Vector operators split ","code":""},{"path":"https://optimal2050.github.io/multimod/reference/split_at_top_level_operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split LaTeX math string at top-level operators ‚Äî split_at_top_level_operators","text":"character vector expression chunks","code":""},{"path":"https://optimal2050.github.io/multimod/reference/split_top_level_operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Split LaTeX math string at top-level operators ‚Äî split_top_level_operators","title":"Split LaTeX math string at top-level operators ‚Äî split_top_level_operators","text":"Split LaTeX math string top-level operators","code":""},{"path":"https://optimal2050.github.io/multimod/reference/split_top_level_operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split LaTeX math string at top-level operators ‚Äî split_top_level_operators","text":"","code":"split_top_level_operators(   latex_str,   operators = c(\"+\", \"-\", \"\\\\\\\\cdot\", \"\\\\\\\\div\", \"=\") )"},{"path":"https://optimal2050.github.io/multimod/reference/split_top_level_operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split LaTeX math string at top-level operators ‚Äî split_top_level_operators","text":"latex_str LaTeX math string operators Vector operators split ","code":""},{"path":"https://optimal2050.github.io/multimod/reference/split_top_level_operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split LaTeX math string at top-level operators ‚Äî split_top_level_operators","text":"character vector expression chunks, including operators","code":""},{"path":"https://optimal2050.github.io/multimod/reference/write_gams.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a GAMS model file from a multimod object ‚Äî write_gams","title":"Write a GAMS model file from a multimod object ‚Äî write_gams","text":"Write GAMS model file multimod object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/write_gams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a GAMS model file from a multimod object ‚Äî write_gams","text":"","code":"write_gams(model, file = NULL, format_expr = TRUE, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/write_gams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a GAMS model file from a multimod object ‚Äî write_gams","text":"model multimod model object file Output file path (optional) format_expr logical; whether format expressions line breaks ... Additional arguments passed formatting functions","code":""},{"path":"https://optimal2050.github.io/multimod/reference/write_gams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a GAMS model file from a multimod object ‚Äî write_gams","text":"Character vector writes file file given","code":""},{"path":"https://optimal2050.github.io/multimod/reference/write_gams.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a full GAMS model file from a multimod object ‚Äî write_gams.model","title":"Write a full GAMS model file from a multimod object ‚Äî write_gams.model","text":"Write full GAMS model file multimod object","code":""},{"path":"https://optimal2050.github.io/multimod/reference/write_gams.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a full GAMS model file from a multimod object ‚Äî write_gams.model","text":"","code":"# S3 method for class 'model' write_gams(model, file = NULL, format_expr = TRUE, ...)"},{"path":"https://optimal2050.github.io/multimod/reference/write_gams.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a full GAMS model file from a multimod object ‚Äî write_gams.model","text":"model multimod model object file Output file path (optional) format_expr logical; whether format expressions line breaks ... Additional arguments passed formatting functions","code":""},{"path":"https://optimal2050.github.io/multimod/reference/write_gams.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a full GAMS model file from a multimod object ‚Äî write_gams.model","text":"Character vector writes file file given","code":""},{"path":"https://optimal2050.github.io/multimod/news/index.html","id":"multimod-development-version","dir":"Changelog","previous_headings":"","what":"multimod (development version)","title":"multimod (development version)","text":"Initial CRAN submission.","code":""}]
